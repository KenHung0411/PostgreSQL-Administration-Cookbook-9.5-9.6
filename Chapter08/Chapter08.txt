SELECT
  current_timestamp - query_start AS runtime,
  datname, usename, query
FROM pg_stat_activity
WHERE state = 'active'
ORDER BY 1 DESC;


SELECT
  current_timestamp - query_start AS runtime,
  datname, usename, query
FROM pg_stat_activity
WHERE state = 'active'
AND current_timestamp - query_start > '1 min'
ORDER BY 1 DESC;


SELECT datname
, usename
, wait_event_type
, wait_event
, query
FROM pg_stat_activity
WHERE wait_event IS NOT NULL;

SELECT datname, usename, query
FROM pg_stat_activity
WHERE waiting = true;


SELECT datname
, usename
, wait_event_type
, wait_event
, pg_blocking_pids(pid) AS blocked_by
, query
FROM pg_stat_activity
WHERE wait_event IS NOT NULL;

SELECT
  w.query AS waiting_query,
  w.pid AS waiting_pid,
  w.usename AS waiting_user,
  l.query AS locking_query,
  l.pid AS locking_pid,
  l.usename AS locking_user,
  t.schemaname || '.' || t.relname AS tablename
FROM pg_stat_activity w
JOIN pg_locks l1 ON w.pid = l1.pid AND NOT l1.granted
JOIN pg_locks l2 ON l1.relation = l2.relation AND l2.granted
JOIN pg_stat_activity l ON l2.pid = l.pid
JOIN pg_stat_user_tables t ON l1.relation = t.relid
WHERE w.waiting;


SELECT pg_terminate_backend(pid)
FROM pg_stat_activity
WHERE state = 'idle in transaction'
AND current_timestamp - query_start > '10 min';


SELECT t.schemaname || '.' || t.relname AS tablename,
l.pid, l.granted
FROM pg_locks l JOIN pg_stat_user_tables t
ON l.relation = t.relid;


CREATE TEMPORARY TABLE tmp_stat_user_tables AS
SELECT * FROM pg_stat_user_tables;

SELECT * FROM pg_stat_user_tables n
JOIN tmp_stat_user_tables t
ON n.relid=t.relid
AND (n.seq_scan,n.idx_scan,n.n_tup_ins,n.n_tup_upd,n.n_tup_del)
 <> (t.seq_scan,t.idx_scan,t.n_tup_ins,t.n_tup_upd,t.n_tup_del);


CREATE TABLE backup_stat_user_tables AS
SELECT current_timestamp AS snaptime, *
FROM pg_stat_user_tables;

INSERT INTO backup_stat_user_tables
SELECT current_timestamp AS snaptime, *
FROM pg_stat_user_tables;


CREATE OR REPLACE FUNCTION table_file_access_info(
  IN schemaname text, IN tablename text,
  OUT last_access timestamp with time zone,
  OUT last_change timestamp with time zone
) LANGUAGE plpgsql AS $func$
DECLARE
  tabledir text;
  filenode text;
BEGIN
  SELECT regexp_replace(
      current_setting('data_directory') || '/' || pg_relation_filepath(c.oid),
      pg_relation_filenode(c.oid) || '$', ''),
    pg_relation_filenode(c.oid)
  INTO tabledir, filenode
  FROM pg_class c
  JOIN pg_namespace ns
    ON c.relnamespace = ns.oid
   AND c.relname = tablename
   AND ns.nspname = schemaname;
  RAISE NOTICE 'tabledir: % - filenode: %', tabledir, filenode;
  -- find latest access and modification times over all segments
  SELECT max((pg_stat_file(tabledir || filename)).access),
    max((pg_stat_file(tabledir || filename)).modification)
  INTO last_access, last_change
  FROM pg_ls_dir(tabledir) AS filename
  -- only use files matching <basefilename>[.segmentnumber]
  WHERE filename ~ ('^' || filenode || '([.]?[0-9]+)?$');
END;
$func$;


WITH temporary_tablespaces AS (
  SELECT unnest(string_to_array(
    current_setting('temp_tablespaces'), ',')
    ) AS temp_tablespace
  )
SELECT tt.temp_tablespace,
pg_tablespace_location(t.oid) AS location,
pg_tablespace_size(t.oid) AS size
FROM temporary_tablespaces tt
JOIN pg_tablespace t ON t.spcname = tt.temp_tablespace
ORDER BY 1;


--
-- The following is a shell script
--
#!/bin/bash
outdir=/var/www/reports
begin=$(date +'%Y-%m-%d %H:00:00' -d '-1 day')
end=$(date +'%Y-%m-%d %H:00:00')
outfile="$outdir/daily-$(date +'%H').html"
pgbadger -q -b "$begin" -e "$end" -o "$outfile" \
  /var/log/postgres.log.1 /var/log/postgres.log
